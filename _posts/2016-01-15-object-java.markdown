---
layout: post
title:  "객체란.? 캡슐화"
date:   2016-01-15 16:35:57 +0900
categories: jekyll update
---

절차 지향과 객체 지향

절차지향식 프로그래밍의 핵심은 프로그램을 구현하는데에 있어서 데이터를 중심으로 한다는 것이다.

여러 함수를 통해 데이터를 공유하여 동작이 이루어 진다.
데이터가 평생 바뀌지 않을거라면 상관 없지만 이미 알고 있겠지만 이런 일은 너무나도 많이 일어나게 된다.

예를 들어 int 타입의 데이터를 double로 변경했다고 가정하면 어떤 문제가 생겨날지 예상이 된다.
int에서 double로 바뀐 아주 작은(?) 일이 며칠이 소요될지 모르는 엄청난 일이 된다. 또 검증은 어떻게 할 것인가???

이런 문제를 객체지향 프로그램에서는 캡슐화를 통해 해결할 수 있다.
데이터 중심으로 구현하게 되는 절차 지향과 달리 객체 지향 프로그래밍은 기능이 중심이 된다.

각 객체들은 데이터를 내부적으로는 가지고 있지만 직접적으로 노출하지 않는다.
특정 객체가 가지고 있는 데이터에 변화가 있더라도 그 객체 내부의 변화일 뿐이지 다른 소스를 수정해야 하는 일은 거의 생기지 않는다.

객체 지향의 핵심은 기능이다.

TV를 예로 들어보면,

* 채널 증가
* 채널 감소
* 입력 받은 번호로 채널 이동
* 볼륨 증가
* 볼륨 감소

----------------------------------------------------------------------------------------------------

~~~
TV tv = new TV();
tv.increaseVolume(); // 기능을 제공
~~~

~~~
TV tv = new TV();
int volume = tv.getVolume();
tv.setVolume(volume + 1);
~~~

위에 두 코드의 차이를 보면 알 수 있을 것이다.

첫 번째 코드는 기능만을 통해 볼륨을 증가 시키지만, 아래 코드는 data를 직접 컨트롤 하는 것을 볼 수 있다.
엄청나게 많은 소스가 있다고 가정하고 int가 double로 변경된다고 하면 아마 엄청 힘든 일이 생길 것이다.

